//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/_Project/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PassThrough"",
            ""id"": ""894db68b-af31-4c29-9926-d8360af9d5d6"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""PassThrough"",
                    ""id"": ""763c7350-b38f-4bc1-bec3-10208aa706a6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""737d00d6-bc31-4cbb-a82f-2ebccacf88e1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchRelease"",
                    ""type"": ""Button"",
                    ""id"": ""d8b11d04-3216-4ff2-9d4c-9c1bc527a0be"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""217b31b8-6480-413c-b8b8-2c73043903b5"",
                    ""path"": ""<Touchscreen>/primaryTouch/pressure"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0efb1ab5-75a0-43dc-b160-2743a298e686"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e904f78-13bb-4a07-86bf-349a040bca14"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e32e00c-a3c7-4959-b1d3-d82cb6dbf110"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""662408d5-669d-46a8-a0ea-84dd6cc09e8d"",
            ""actions"": [
                {
                    ""name"": ""MouseTap"",
                    ""type"": ""Value"",
                    ""id"": ""e2a80d56-2f09-4cb2-928e-d248edf91a9f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""8ad7ebfd-d17e-450d-a391-cda4f5bb223f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseRelease"",
                    ""type"": ""Button"",
                    ""id"": ""7cca6395-158c-409d-8a8f-f0e035b81183"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7dcdf0a8-87ad-4dbb-9bd1-32adcbc1c224"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2db93392-a505-4690-8e94-1be2b9334d14"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b82ca03c-3043-44ce-832c-9938d8664722"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PassThrough
        m_PassThrough = asset.FindActionMap("PassThrough", throwIfNotFound: true);
        m_PassThrough_Tap = m_PassThrough.FindAction("Tap", throwIfNotFound: true);
        m_PassThrough_TouchPosition = m_PassThrough.FindAction("TouchPosition", throwIfNotFound: true);
        m_PassThrough_TouchRelease = m_PassThrough.FindAction("TouchRelease", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseTap = m_Mouse.FindAction("MouseTap", throwIfNotFound: true);
        m_Mouse_MousePosition = m_Mouse.FindAction("MousePosition", throwIfNotFound: true);
        m_Mouse_MouseRelease = m_Mouse.FindAction("MouseRelease", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_PassThrough.enabled, "This will cause a leak and performance issues, PlayerInput.PassThrough.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Mouse.enabled, "This will cause a leak and performance issues, PlayerInput.Mouse.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PassThrough
    private readonly InputActionMap m_PassThrough;
    private List<IPassThroughActions> m_PassThroughActionsCallbackInterfaces = new List<IPassThroughActions>();
    private readonly InputAction m_PassThrough_Tap;
    private readonly InputAction m_PassThrough_TouchPosition;
    private readonly InputAction m_PassThrough_TouchRelease;
    public struct PassThroughActions
    {
        private @PlayerInput m_Wrapper;
        public PassThroughActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tap => m_Wrapper.m_PassThrough_Tap;
        public InputAction @TouchPosition => m_Wrapper.m_PassThrough_TouchPosition;
        public InputAction @TouchRelease => m_Wrapper.m_PassThrough_TouchRelease;
        public InputActionMap Get() { return m_Wrapper.m_PassThrough; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PassThroughActions set) { return set.Get(); }
        public void AddCallbacks(IPassThroughActions instance)
        {
            if (instance == null || m_Wrapper.m_PassThroughActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PassThroughActionsCallbackInterfaces.Add(instance);
            @Tap.started += instance.OnTap;
            @Tap.performed += instance.OnTap;
            @Tap.canceled += instance.OnTap;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
            @TouchRelease.started += instance.OnTouchRelease;
            @TouchRelease.performed += instance.OnTouchRelease;
            @TouchRelease.canceled += instance.OnTouchRelease;
        }

        private void UnregisterCallbacks(IPassThroughActions instance)
        {
            @Tap.started -= instance.OnTap;
            @Tap.performed -= instance.OnTap;
            @Tap.canceled -= instance.OnTap;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
            @TouchRelease.started -= instance.OnTouchRelease;
            @TouchRelease.performed -= instance.OnTouchRelease;
            @TouchRelease.canceled -= instance.OnTouchRelease;
        }

        public void RemoveCallbacks(IPassThroughActions instance)
        {
            if (m_Wrapper.m_PassThroughActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPassThroughActions instance)
        {
            foreach (var item in m_Wrapper.m_PassThroughActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PassThroughActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PassThroughActions @PassThrough => new PassThroughActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_MouseTap;
    private readonly InputAction m_Mouse_MousePosition;
    private readonly InputAction m_Mouse_MouseRelease;
    public struct MouseActions
    {
        private @PlayerInput m_Wrapper;
        public MouseActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseTap => m_Wrapper.m_Mouse_MouseTap;
        public InputAction @MousePosition => m_Wrapper.m_Mouse_MousePosition;
        public InputAction @MouseRelease => m_Wrapper.m_Mouse_MouseRelease;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @MouseTap.started += instance.OnMouseTap;
            @MouseTap.performed += instance.OnMouseTap;
            @MouseTap.canceled += instance.OnMouseTap;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @MouseRelease.started += instance.OnMouseRelease;
            @MouseRelease.performed += instance.OnMouseRelease;
            @MouseRelease.canceled += instance.OnMouseRelease;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @MouseTap.started -= instance.OnMouseTap;
            @MouseTap.performed -= instance.OnMouseTap;
            @MouseTap.canceled -= instance.OnMouseTap;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @MouseRelease.started -= instance.OnMouseRelease;
            @MouseRelease.performed -= instance.OnMouseRelease;
            @MouseRelease.canceled -= instance.OnMouseRelease;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);
    public interface IPassThroughActions
    {
        void OnTap(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchRelease(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnMouseTap(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnMouseRelease(InputAction.CallbackContext context);
    }
}
